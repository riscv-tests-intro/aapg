# Sample config.ini file to generate a random program
# using aapg (Automated Assembly Program Generator)

# Each section commands a behaviour of aapg
# and inline comments in each section will explain the
# usage

# ---------------------------------------------------------------------------------
# General directives to aapg
# Options:
#       total_instructions: Approximate number of instructions to be generated
#                           by aapg. Actual may vary.
#       regs_not_use:       Comma separated list of RISC-V registers to not use for
#                           reading/writing in the random generated instructions
# ---------------------------------------------------------------------------------
[general]
total_instructions = 30000
regs_not_use = x1,x2,x3,x3,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14
user_trap_handler = true
code_start_address = 0x80000000
default_program_exit = true

# ---------------------------------------------------------------------------------
# Distribution of instructions according to ISA extensions
# Specify the relative frequency of each set 
# E.g. : A relative frequency of 1 each means each instruction will be 
# generated equal number of times in the total instructions. Specify 0 to disable.
# ---------------------------------------------------------------------------------
[isa-instruction-distribution]
rel_sys = 0
rel_sys.csr = 0
rel_rv32i.ctrl = 10
rel_rv32i.compute = 10
rel_rv32i.data = 10
rel_rv32i.fence = 10
rel_rv64i.compute = 10
rel_rv64i.data = 10
rel_rv32m = 10
rel_rv64m = 10
rel_rv32a = 10
rel_rv64a = 10
rel_rv32f = 10
rel_rv64f = 10
rel_rv32d = 10
rel_rv64d = 10

# Compressed instructions

rel_rvc.ctrl = 0
rel_rvc.compute = 10
rel_rvc.sp = 10
rel_rvc.data = 10
rel_rvc.fdata = 10

rel_rv32c.compute = 0
rel_rv32c.ctrl = 0
rel_rv32c.fdata = 0

rel_rv64c.compute = 10
rel_rv64c.data = 10

[branch-control]
backward-probability = 0.7

# ---------------------------------------------------------------------------------
# Recursion options
# Options:
#       recursion_enable:   Generate the template for recursion or not
#       recursion_depth:    Number of times the recursive function calls itself
#       recursion_calls:    Number of instances of recursive function entry
# ---------------------------------------------------------------------------------
[recursion-options]
recursion-enable = false
recursion-depth = 10
recursion-calls = 5

# ---------------------------------------------------------------------------------
# Data access sections
# Specify which regions of memory will be accessed by the random program
# Options:
#       enable:         Force all memory accesses instructions to only load/store
#                       to the specified list of address sections
#                       
# Section Template: Specify legal access zones using the following template
#       section_name =  section_low,section_high (HEX)     
# ---------------------------------------------------------------------------------
[access-sections]
begin_signature = 0x80090000,0x800a0000,rw


# ---------------------------------------------------------------------------------
# User template sections
# Allows users to specify call to a custom function with number of times to call
# User should ensure that function does not modify 
#                       
# Section Template: Specify user template function calls with the number of times
#       function_name = number_of_times
# ---------------------------------------------------------------------------------
[user-functions]
_test = 0

# ---------------------------------------------------------------------------------
# Instruction Cache and Data-Cache Thrashing
# ---------------------------------------------------------------------------------
[i-cache]
num_calls = 0
num_bytes_per_block = 16
num_blocks = 8
num_cycles = 10

[d-cache]
num_calls = 10
num_bytes_per_block = 16
num_blocks = 8
num_cycles = 10

# ---------------------------------------------------------------------------------
# Exception generation
# ---------------------------------------------------------------------------------
[exception-generation]
ecause00 = 10
ecause01 = 10
ecause02 = 10
ecause03 = 10
ecause04 = 10
ecause05 = 10
ecause06 = 10
ecause07 = 10
ecause08 = 10
ecause09 = 10
ecause10 = 10
ecause11 = 10
ecause12 = 0
ecause13 = 0
ecause14 = 0

# ---------------------------------------------------------------------------------
# Data Hazards
# Options:
#   raw_prob : Probability of an instruction being a Read-After-Write hazard
#   war_prob : Probability of an instruction being a Write-After-Read hazard
#   waw_prob : Probability of an instruction being a Write-After-Write hazard
#   num_regs_lookbehind : Configures number of registers to consider as last read/written
# ---------------------------------------------------------------------------------
[data-hazards]
raw_prob = 10
war_prob = 10
waw_prob = 10
num_regs_lookbehind = 3
